
apply plugin: 'com.github.johnrengelman.shadow'

archivesBaseName = project.archives_base_name + '-' + project.property('minecraft_version')
version = rootProject.version
group = project.maven_group


architectury{
    platformSetupLoomIde()
    forge()
}

configurations {
    compileModule
}

loom{
    mixinConfig "collar.mixins.json"
    mixinConfig "collar-commands.mixin.json"
}
dependencies{

    implementation project(':plastic-api')
    implementation project(':common')
    implementation (project(path: ":${project.module_name}:glue"))

    developmentForge(project(path: ":${project.module_name}:glue")) { transitive = false }
    //developmentFabric(project(path: ":something")) { transitive = false } //Use this is a module contains ANY mod resources.

    compileModule project(path: ":common", configuration: 'shadow')
    compileModule group: 'org.joml', name: 'joml', version: '1.10.1'

    compileModule (project(path: ":${project.module_name}:glue", configuration: "transformProductionForge")){
        transitive = false
    }

    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "description", project.collar_description

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version, "description": project.collar_description
    }
}
tasks.withType(JavaCompile) {
    it.options.encoding = "UTF-8"
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
shadowJar{
    configurations = [project.configurations.compileModule]
    classifier "dev"
    relocate 'com.collarmc.shared', 'com.collarmc.libs.com.collarmc.shared'
    relocate 'com.collarmc.client', 'com.collarmc.libs.com.collarmc.client'
    relocate 'com.collarmc.pounce', 'com.collarmc.libs.com.collarmc.pounce'
    relocate 'org.joml', 'com.collarmc.libs.org.joml'
    relocate 'assets.collar', '' //TODO this can be dangerous.
}
remapJar{
    dependsOn shadowJar
    input.set shadowJar.archiveFile
    classifier "forge"
}

jar {
    classifier "dev"
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}